def call(Map pipelineParams) {
  def project = pipelineParams["PROJECT"]
  def files = dssParams["FILES"]
  def programs = pipelineParams["PROGRAMS"]

  pipeline {
    agent none
    stages {
      agent { label project.NODE }
      stage("Pull Project to Node"){
        steps {
          checkout scm
        }
      }
      stage("Pipeline Parameter Test") {
        steps {
          powershell "Test-Path -Path $programs.UNITY_APP"
          powershell "Test-Path -Path $files.UNITY_PROJECT"
        }
      }
      stage("Edit Mode Tests") {
        steps {
          powershell "cmd.exe /C $programs.UNITY_APP -batchmode -runTests -projectPath ${WORKSPACE}/$files.UNITY_PROJECT -testResults ${WORKSPACE}/$files.EDIT_MODE_RESULTS -testPlatform editmode"
        }
        post
        {
          always {
            nunit(testResultsPattern: files.EDIT_MODE_RESULTS, debug: false, keepJUnitReports: true, skipJUnitArchiver: false, failIfNoResults: false)
          }
        }
      }
      stage("Play Mode Tests") {
        steps {
          powershell "cmd.exe /C $programs.UNITY_APP -batchmode -runTests -projectPath ${WORKSPACE}/$files.UNITY_PROJECT -testResults ${WORKSPACE}/$files.PLAY_MODE_RESULTS -testPlatform playmode"
        }
        post
        {
          always {
            nunit(testResultsPattern: files.PLAY_MODE_RESULTS, debug: false, keepJUnitReports: true, skipJUnitArchiver: false, failIfNoResults: false)
          }
        }
      }
      stage("Build Project") {
        steps {
          powershell "cmd.exe /C $programs.UNITY_APP -quit -nographics -projectPath ${WORKSPACE}/$files.UNITY_PROJECT -batchmode -BuildVersion $project.MAJOR_RELEASE_NUMBER.${env.BUILD_NUMBER} -BuildDirectory ${WORKSPACE}/$files.UNITY_BUILD -executeMethod UnityBuildScript.BuildProject
        }
      }
    }
  }
}
